taskKey="com.codegym.games.spaceinvaders.part19"\n\nSpace Invaders (Part 19/34)

We&#39;ll implement logic to &quot;kill&quot; the player by overriding the kill() method. In addition to setting the isAlive flag to false,
it will add an animation of the ship&#39;s destruction.


Требования:
1.	The PlayerShip class must override the kill() method.
2.	The kill() method must not do anything if the player&#39;s ship is &quot;dead&quot;.
3.	The PlayerShip class&#39;s kill() method must set the isAlive field to false.
4.	In the PlayerShip class&#39;s kill() method, you need to call the base class&#39;s setAnimatedView(int[][]...) method with the following arguments: ShapeMatrix.KILL_PLAYER_ANIMATION_FIRST, ShapeMatrix.KILL_PLAYER_ANIMATION_SECOND, ShapeMatrix.KILL_PLAYER_ANIMATION_THIRD, ShapeMatrix.DEAD_PLAYER.


Space Invaders (Part 19/34)

At this stage, we&#39;ll prepare an animation for when a ship explodes. To do this, we need a List&lt;int[][]&gt; frames field,
which will store a list of matrices representing the animation frames.
We&#39;ll also need a frameIndex field that stores the index of the current animation frame.
We&#39;ll set the animation frames in the setAnimatedView method. It takes an array of frames (matrices) and puts them in the frames list.
Finally, we&#39;ll implement the setStaticView method, which sets the ship&#39;s initial matrix.



Space Invaders (Part 19/34)

We&#39;ll give the PlayerShip class a method that checks whether enemy projectiles have hit the player&#39;s ship (the isCollision() method in the GameObject class).
If there is a hit, it will &quot;kill&quot; the ship and the projectile. We&#39;ll also add the player&#39;s ship to the class.
We&#39;ll draw it and add the collision check in the appropriate method.



Space Invaders (Part 19/34)

Now we&#39;ll create the player&#39;s ship. We need the PlayerShip class for this. Its constructor will set the ship&#39;s coordinates so that
the ship is displayed centered at the bottom of the screen. The constructor sets the ship&#39;s appearance by setting the PLAYER matrix,
which we&#39;ve provided for you in the ShapeMatrix class. A ship can have two states: &quot;alive&quot; or &quot;dead&quot;. To represent these states,
we&#39;ll add an isAlive field to the Ship parent class. When a projectile hits a ship, they (the projectile and the ship) are destroyed,
so we&#39;ll add a kill method. When it is called, we&#39;ll &quot;kill&quot; the ship and the projectile.



Space Invaders (Part 19/34)

We&#39;ll store all the enemy projectiles in an enemyBullets field in the SpaceInvadersGame class. We&#39;ll add code to draw and move them in appropriate methods.
To remove projectiles that are no longer relevant, we&#39;ll create and implement a removeDeadBullets() method in the SpaceInvadersGame class.
To remove the projectiles, you can either use an iterator, or create a copy of the enemyBullets list and run through it in a loop.
If we determine that a projectile needs to be removed, we&#39;ll call enemyBullets.remove(bullet).
Projectiles are irrelevant if they have flown off the screen or if they have hit their target (isAlive == false).
Let&#39;s add a check() helper function. At this stage, it will call the removeDeadBullets() method. Later, it will perform various checks at each step of the game.
We&#39;ll call the fire() method on the fleet with the same frequency, potentially causing an enemy ship to fire.
If a shot is fired, the method returns a projectile, which must be added to the list.



Space Invaders (Part 19/34)

Let&#39;s create and implement a fire() method for the EnemyFleet class. This method will call the fire on a randomly selected ship in the fleet.
Additionally, the probability that the fleet will fire will be determined by the value of the DIFFICULTY field.



